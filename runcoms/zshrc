#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Augusto Elesb√£o <aelesbao@gmail.com>
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Installs Antigen if not present
antigen_path="${ZDOTDIR:-$HOME}/antigen.zsh"
if [[ ! -s "${antigen_path}" ]]; then
  curl -L git.io/antigen >! "${antigen_path}"
fi
#source "${antigen_path}"

#antigen use aelesbao/prezto@custom
#antigen bundle marlonrichert/zsh-autocomplete
#antigen apply


# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

#
# Customize to your needs...
#

# set the options for a terminal device interface
stty -ixon

# history ignores lines starting with white spaces
setopt HIST_IGNORE_SPACE

# Use CTRL+arrows to move backward and forward words
bindkey ';5D' emacs-backward-word
bindkey ';5C' emacs-forward-word

#
# Aliases
#
(( $+commands[nvim] )) && alias vim='nvim'
(( $+commands[hub] )) && alias git='hub'
(( $+commands[trash] )) && alias rm='trash'
(( $+commands[xh] )) && alias http='xh'
(( $+commands[exa] )) && alias exa='exa -lha'
(( $+commands[lsd] )) && alias ls='lsd --blocks=permission,date,size,name'
(( $+commands[lsd] )) && alias tree='ls --tree'
(( $+commands[procs] )) && alias psg='procs' || alias psg='ps aux | grep '

alias resource="source ${HOME}/.zshrc"

alias gc='git cis'
alias ghb='git browse'
alias gr='git rebase'
alias gri='git rebase --interactive'
alias cdgr='cd $(git-root)'

alias dc='docker-compose'
(( $+commands[terragrunt] )) && alias tf="terragrunt" || alias tf="terraform"
(( $+commands[subkey] )) || alias subkey="docker run --name subkey --rm parity/subkey"

alias pwsafe=' pwsafe'
alias backup='rsync -Pha'
alias date-iso='date +%Y-%m-%dT%H:%M:%S%z'

alias to-lower='tr "[:upper:]" "[:lower:]"'
alias to-upper='tr "[:lower:]" "[:upper:]"'

if [[ "$OSTYPE" == darwin* ]]; then
  alias list-open-ports='lsof -Pn -i4'
fi

alias youtube-dl-mp3='youtube-dl -x --audio-format mp3 --audio-quality 320K'
alias asciicast2gif='docker run --rm -v $PWD:/data asciinema/asciicast2gif'

# Fix for broken SSH output when using Kitty
if [[ "$TERM" != xterm-256color ]]; then
  alias ssh='TERM=xterm-256color ssh'
fi

#
# Hooks and Completions
#

# direnv
if (( ${+commands[direnv]} )); then
  eval "$(direnv hook zsh)"
fi

# FZF - Shell Fuzzy Finder
if [[ -f ~/.fzf.zsh ]]; then
  # Setting ag as the default source for fzf. This will make fzf respect your .gitignore
  export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
  export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
  source ~/.fzf.zsh
fi

# kubectl
if (( ${+commands[kubectl]} )); then
  function kubectl-completion() { source <(kubectl completion zsh) }
fi

# DigitalOcean CLI
#if (( ${+commands[doctl]} )); then
  #source <(doctl completion zsh) &!
#fi

#GCLOUD_SDK_HOME="/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk"
#if [[ -d "${GCLOUD_SDK_HOME}" ]]; then
  #source "${GCLOUD_SDK_HOME}/path.zsh.inc"
  #source "${GCLOUD_SDK_HOME}/completion.zsh.inc"
#fi

# iTerm2 Shell Integration
[[ -f "$HOME/.iterm2_shell_integration.zsh" && "$TERM" != "xterm-kitty" ]] && source "$HOME/.iterm2_shell_integration.zsh"

# Kitty aliases
if [[ "$TERM" == "xterm-kitty" ]]; then
  alias icat='kitty kitten icat'
fi

function nvm-enable {
  if [[ "$OSTYPE" == darwin* ]]; then
    nvm_prefix=$(brew --prefix nvm)
  fi
  [[ -d $nvm_prefix ]] && source $nvm_prefix/nvm.sh
}

if [[ -d "$HOME/workspace/go" ]]; then
  export GOPATH="$HOME/workspace/go"
  export PATH="$PATH:$HOME/workspace/go/bin"
fi

function docker-env {
  docker-machine start $1
  eval $(docker-machine env $1)
}

function docker-clean {
  docker ps -a --quiet -f 'status=created' -f 'status=restarting' -f 'status=removing' -f 'status=paused' -f 'status=exited' -f 'status=dead' | \
    xargs -I {} docker rm {}
  docker volume prune
  docker images | grep '<none>' | awk '{print $3}' | xargs docker rmi
}

function kafka-server {
  JAVA_HOME="$(/usr/libexec/java_home -v 1.7)" kafka-server-start.sh /usr/local/etc/kafka/server.properties
}

function start-datomic-console {
  DB=$1
  datomic-console -p 3000 $DB datomic:dev://localhost:4334/$DB
}

# Installs completions that were not auto installed
function install-completions {
  [ -f $site_functions_path/_brew ] || \
    ln -s $(brew --prefix)/Library/Contributions/brew_zsh_completion.zsh \
          $site_functions_path/_brew

  if [ -d /Applications/Docker.app/Contents/Resources/etc ]; then
    docker_functions=(docker docker-compose docker-machine)
    for fn in $docker_functions; do
      ln -s /Applications/Docker.app/Contents/Resources/etc/$fn.zsh-completion $site_functions_path/_$fn
    done
  fi

  zcompile "${ZDOTDIR:-$HOME}/.zcompdump"
}

function update-system-env {
  launchctl setenv PATH "${PATH}"

  for var in $(env | grep _HOME | awk -F= '{print $1}'); do
    launchctl setenv $var "${(P)var}"
  done
}

function zupdate() {
  set -e

  git -C "${HOME}/.zprezto" stash -u \
    && git -C "${HOME}/.zprezto" pull --rebase --prune \
    && git -C "${HOME}/.zprezto" stash pop

  git -C "${HOME}/.zprezto/contrib" stash -u \
    && git -C "${HOME}/.zprezto/contrib" pull --rebase --prune \
    && git -C "${HOME}/.zprezto/contrib" stash pop
}

function notify {
  osascript -e "display notification \"$1\""
  say "$1"
}

function install-macos-headers() {
  sudo installer \
    -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg \
    -target /
}

function install-coursier() {
  curl -Lo /usr/local/bin/cs https://git.io/coursier-cli-macos &&
    chmod +x /usr/local/bin/cs &&
    (xattr -d com.apple.quarantine /usr/local/bin/cs || true)
}

# Load local zshrc
[[ -f "$HOME/.zshrc.local" ]] && source "$HOME/.zshrc.local"
